{"version":3,"sources":["client.ts","util.ts","components/Button.tsx","components/Dialog.tsx","components/Error.tsx","components/Loading.tsx","components/RatesTable.tsx","components/Rates.tsx","components/App.tsx","components/ClientApp.tsx","index.tsx"],"names":["cache","InMemoryCache","stateLink","withClientState","defaults","active","resolvers","restLink","RestLink","typePatcher","RatePayload","data","rates","Object","entries","map","_ref","_ref2","slicedToArray","__typename","code","rate","uri","link","ApolloLink","from","client","ApolloClient","fetch","window","Delay","duration","Promise","resolve","setTimeout","failFetch","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Error","stop","this","apply","arguments","simulateFail","checked","target","isoDate","date","toISOString","slice","Button","text","onClick","react_default","createElement","Dialog","state","open","close","_this","setState","props","onDismiss","className","children","components_Button","dismissLabel","React","Component","defaultProps","message","components_Dialog","role","style","marginTop","Loading","_ref$interval","interval","aria-busy","aria-label","$nest","& span:before","content","& span","fontSize","animationDuration","concat","animationName","keyframes","opacity","to","animationIterationCount","animationDirection","& span:nth-of-type(2)","animationDelay","& span:nth-of-type(3)","RatesTable","_ref$payload$data","payload","base","whiteSpace","key","GET_LATEST","gql","_templateObject","Rates","react_apollo_browser_umd","query","variables","fetchPolicy","notifyOnNetworkStatusChange","loading","error","refetch","networkStatus","NetworkStatus","components_Loading","components_Error","addDays","Date","components_RatesTable","GET_ACTIVE","App_templateObject","App","type","onChange","defaultChecked","components_Rates","writeData","ClientApp","components_App","ReactDOM","render","components_ClientApp","document","querySelector"],"mappings":"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","file":"static/js/main.1e6ce086.chunk.js","sourcesContent":["import { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloLink } from \"apollo-link\";\nimport { RestLink } from \"apollo-link-rest\";\nimport { withClientState } from \"apollo-link-state\";\n\nconst cache = new InMemoryCache();\nconst stateLink = withClientState({\n  cache,\n  defaults: {\n    active: false,\n  },\n  resolvers: {},\n});\nconst restLink = new RestLink({\n  typePatcher: {\n    RatePayload: (data: any): any => {\n      if (data.rates != null) {\n        data.rates = Object.entries(data.rates).map(([code, rate]) => ({\n          __typename: \"Rate\",\n          code,\n          rate,\n        }));\n      }\n      return data;\n    },\n  },\n  uri: \"https://api.exchangeratesapi.io/\",\n});\nconst link = ApolloLink.from([stateLink, restLink]);\nconst client = new ApolloClient({ cache, link });\n\nexport default client;\n","const { fetch } = window;\n\nexport const Delay = (duration: number) =>\n  new Promise(resolve => setTimeout(resolve, duration));\n\nconst failFetch = async () => {\n  await Delay(500);\n  throw Error(\"Simulated network failure\");\n};\n\nexport const simulateFail = ({\n  target: { checked },\n}: React.ChangeEvent<HTMLInputElement>) => {\n  window.fetch = checked ? failFetch : fetch;\n};\n\nexport const isoDate = (date: Date) => date.toISOString().slice(0, 10);\n","import React from \"react\";\n\nconst Button = ({ text, onClick }: { text: string; onClick: () => void }) => (\n  <button onClick={onClick}>{text}</button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\n\ninterface Props {\n  onDismiss: () => void;\n  dismissLabel: string;\n}\n\nclass Dialog extends React.Component<Props, { open: boolean }> {\n  static defaultProps = {\n    dismissLabel: \"Close\",\n  };\n\n  state = {\n    open: true,\n  };\n\n  render() {\n    return (\n      <dialog open={this.state.open}>\n        <div className=\"content\">{this.props.children}</div>\n        <footer>\n          <Button onClick={this.close} text={this.props.dismissLabel} />\n        </footer>\n      </dialog>\n    );\n  }\n\n  private close = (): void => {\n    this.setState({ open: false });\n    this.props.onDismiss();\n  };\n}\n\nexport default Dialog;\n","import React from \"react\";\nimport { style } from \"typestyle\";\nimport Dialog from \"./Dialog\";\n\ninterface Props {\n  message: string;\n  onDismiss: () => void;\n  dismissLabel: string;\n}\n\nconst Error = ({ message, onDismiss, dismissLabel }: Props) => (\n  <Dialog {...{ onDismiss, dismissLabel }}>\n    <p role=\"heading\" className={style({\n      marginTop: 0,\n    })}>Error</p>\n    <p>{message}</p>\n  </Dialog>\n);\n\nexport default Error;\n","import React from \"react\";\nimport { keyframes, style } from \"typestyle\";\n\nconst Loading = ({ interval = 0.35 }) => (\n  <div\n    role=\"alert\"\n    aria-busy=\"true\"\n    aria-label=\"Loading\"\n    className={style({\n      $nest: {\n        \"& span:before\": {\n          content: `\"â€¢\"`,\n        },\n        \"& span\": {\n          fontSize: \"3rem\",\n          animationDuration: `${interval}s`,\n          animationName: keyframes({\n            from: { opacity: 0 },\n            to: { opacity: 1 },\n          }),\n          animationIterationCount: \"infinite\",\n          animationDirection: \"alternate\",\n        },\n        \"& span:nth-of-type(2)\": {\n          animationDelay: `${interval / 2}s`,\n        },\n        \"& span:nth-of-type(3)\": {\n          animationDelay: `${interval}s`,\n        },\n      },\n    })}\n  >\n    <span />\n    <span />\n    <span />\n  </div>\n);\n\nexport default Loading;\n","import React from \"react\";\nimport { style } from \"typestyle\";\nimport { Rate, RatePayload } from \"../types\";\n\nconst RatesTable = ({\n  payload: {\n    data: { rates, base, date },\n  },\n}: {\n  payload: RatePayload;\n}) => (\n  <table>\n    <caption\n      className={style({\n        whiteSpace: `nowrap`,\n      })}\n    >\n      <span>{base}</span> <span>{date}</span>\n    </caption>\n    <thead>\n      <tr>\n        <th>Code</th>\n        <th>Rate</th>\n      </tr>\n    </thead>\n    <tbody>\n      {rates.map(({ code, rate }: Rate) => (\n        <tr key={code}>\n          <td>{code}</td>\n          <td>{rate}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default RatesTable;\n","import { NetworkStatus } from \"apollo-client\";\nimport { addDays } from \"date-fns\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { isoDate } from \"../util\";\nimport Button from \"./Button\";\nimport Error from \"./Error\";\nimport Loading from \"./Loading\";\nimport RatesTable from \"./RatesTable\";\n\nconst GET_LATEST = gql`\n  query Latest($date: String = \"latest\") {\n    data(date: $date) @rest(type: \"RatePayload\", path: \"{args.date}\") {\n      date\n      base\n      rates\n    }\n  }\n`;\n\nconst Rates = () => (\n  <Query\n    query={GET_LATEST}\n    variables={{\n      date: \"latest\",\n    }}\n    fetchPolicy=\"cache-and-network\"\n    notifyOnNetworkStatusChange\n  >\n    {({ loading, error, data, refetch, networkStatus }) => {\n      if (loading || networkStatus === NetworkStatus.refetch) {\n        return <Loading />;\n      }\n      if (error) {\n        return (\n          <Error\n            onDismiss={refetch}\n            dismissLabel=\"Retry\"\n            message={error.message}\n          />\n        );\n      }\n      return (\n        <div>\n          <p>\n            <Button\n              text=\"Previous\"\n              onClick={() =>\n                refetch({ date: isoDate(addDays(new Date(data.data.date), -1)) })\n              }\n            />\n            <Button\n              text=\"Next\"\n              onClick={() =>\n                refetch({ date: isoDate(addDays(new Date(data.data.date), 1)) })\n              }\n            />\n            <Button text=\"Refresh\" onClick={() => refetch()} />\n          </p>\n          <RatesTable payload={data} />\n        </div>\n      );\n    }}\n  </Query>\n);\n\nexport default Rates;\n","import gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { simulateFail } from \"../util\";\nimport Button from \"./Button\";\nimport Rates from \"./Rates\";\n\nconst GET_ACTIVE = gql`\n  {\n    active @client\n  }\n`;\n\nconst App = () => (\n  <div>\n    <h1>Currency Exchange Rates</h1>\n    <main>\n      <p>\n        <label>\n          <input\n            type=\"checkbox\"\n            onChange={simulateFail}\n            defaultChecked={false}\n          />\n          Simulate network failure\n        </label>\n      </p>\n      <Query query={GET_ACTIVE}>\n        {({ data, client }) => {\n          if (data.active) {\n            return <Rates />;\n          }\n          return (\n            <p>\n              <Button\n                text=\"Load\"\n                onClick={() => client.writeData({ data: { active: true } })}\n              />\n            </p>\n          );\n        }}\n      </Query>\n    </main>\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport client from \"../client\";\nimport App from \"./App\";\n\nconst ClientApp = () => (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n\nexport default ClientApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ClientApp from \"./components/ClientApp\";\nimport \"./index.css\";\n\nReactDOM.render(<ClientApp />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}